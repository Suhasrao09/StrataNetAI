# Generated by Django 5.2.7 on 2025-10-03 20:31

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SensorReading',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('year', models.PositiveIntegerField()),
                ('month', models.PositiveSmallIntegerField()),
                ('day_of_year', models.PositiveSmallIntegerField()),
                ('hour', models.PositiveSmallIntegerField()),
                ('shift', models.CharField(max_length=20)),
                ('sensor_id', models.CharField(db_index=True, max_length=50)),
                ('latitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('longitude', models.DecimalField(decimal_places=7, max_digits=10)),
                ('elevation_ft', models.DecimalField(decimal_places=2, max_digits=8)),
                ('weather_station_id', models.CharField(max_length=50)),
                ('sensor_status', models.CharField(default='ACTIVE', max_length=20)),
                ('data_quality_flag', models.CharField(default='GOOD', max_length=20)),
                ('temperature_f', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('precipitation_in', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('humidity_pct', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('wind_speed_mph', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('barometric_pressure_inhg', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('slope_zone', models.CharField(db_index=True, max_length=100)),
                ('slope_angle_deg', models.DecimalField(decimal_places=2, max_digits=5)),
                ('bench_height_ft', models.DecimalField(decimal_places=2, max_digits=6)),
                ('rock_type', models.CharField(max_length=50)),
                ('rock_mass_rating', models.PositiveSmallIntegerField()),
                ('joint_spacing_ft', models.DecimalField(decimal_places=2, max_digits=6)),
                ('joint_orientation_deg', models.DecimalField(decimal_places=2, max_digits=5)),
                ('depth_to_water_ft', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('pore_pressure_psi', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('blast_frequency_7days', models.PositiveSmallIntegerField(default=0)),
                ('distance_to_blast_ft', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('blast_magnitude_lbs', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('equipment_passes_per_shift', models.PositiveIntegerField(default=0)),
                ('microseismic_events_daily', models.PositiveIntegerField(default=0)),
                ('max_seismic_magnitude', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('displacement_rate_mm_per_day', models.DecimalField(decimal_places=4, max_digits=10)),
                ('cumulative_displacement_mm', models.DecimalField(decimal_places=4, max_digits=12)),
                ('tiltmeter_microradians', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('strain_gauge_microstrain', models.DecimalField(blank=True, decimal_places=4, max_digits=10, null=True)),
                ('vibration_ppv_mm_per_s', models.DecimalField(blank=True, decimal_places=4, max_digits=8, null=True)),
                ('rockfall_risk_score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('rockfall_occurred', models.BooleanField(db_index=True, default=False)),
                ('rockfall_size_category', models.CharField(default='NONE', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('MANAGER', 'Manager'), ('ADMIN', 'Admin')], default='MANAGER', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_id', models.CharField(max_length=50, unique=True)),
                ('alert_type', models.CharField(choices=[('CRITICAL', 'Critical'), ('HIGH', 'High'), ('MEDIUM', 'Medium'), ('LOW', 'Low')], max_length=20)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('RESOLVED', 'Resolved')], default='ACTIVE', max_length=20)),
                ('zone_name', models.CharField(max_length=200)),
                ('risk_score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('recommended_action', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('sensor_reading', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='api.sensorreading')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
    ]
